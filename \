{ config, pkgs, inputs, ... }:
  {
  home.username = "nika";
  home.homeDirectory = "/home/nika";
  # This value determines the Home Manager release that your configuration is
  # compatible with. This helps avoid breakage when a new Home Manager release
  # introduces backwards incompatible changes.
  #
  home.stateVersion = "24.05"; # Please read the comment before changing.

  # Home Manager is pretty good at managing dotfiles. The primary way to manage
  # plain files is through 'home.file'.
  home.file = {
  };

  # Let Home Manager install and manage itself.
  programs.home-manager.enable = true;
  
  # Rust toolchain
  nixpkgs.overlays = [ inputs.fenix.overlays.default ];
  home.packages = with pkgs; [
    (fenix.complete.withComponents [
      "cargo"
      "clippy"
      "rust-src"
      "rustc"
      "rustfmt"
    ])
  ];


  programs.kitty = {
    enable = true;
    settings.cursor_trail = 3; 
    themeFile = rose-pine-moon;
  };
    
  programs.nixvim = {
    enable = true;
    defaultEditor = true;
    viAlias = true;
    vimAlias = true;
    
    opts = {
      updatetime = 100;
      number = true;
      relativenumber = true;
      shiftwidth = 2;
      swapfile = false;
      undofile = true;
      incsearch = true;
      inccommand = "split";
      ignorecase = true;
      smartcase = true;
      signcolumn = "yes:1";
    };

    colorschemes.poimandres.enable = true;
    
    plugins = {
      lualine.enable = true;
      autoclose.enable = true;
      comment.enable = true;
      telescope.enable = true;
      treesitter.enable = true;
      luasnip.enable = true;
    };

    plugins.lsp = {
      enable = true;
      servers = {
	lua_ls.enable = true;
	nixd.enable = true;
	rust_analyzer = {
	  enable = true;
	  # installCargo = true;
	  # installRustc = true;
	};
      };
    };

    plugins.cmp = {
      enable = true;
      autoEnableSources = true;
      settings.sources = [
	{ name = "nvim_lsp"; }
	{ name = "path"; }
	{ name = "buffer"; }
      ];
    };
  };

  #
  # nixpkgs = {
  #   overlays = [
  #     (final: prev: {
  #       vimPlugins = prev.vimPlugins // {
  #         own-onedark-nvim = prev.vimUtils.buildVimPlugin {
  #           name = "onedark";
  #           src = inputs.plugin-onedark;
  #         };
  #       };
  #     })
  #   ];
  # };

  # programs.neovim = 
  # let
  #   toLua = str: "lua << EOF\n${str}\nEOF\n";
  #   toLuaFile = file: "lua << EOF\n${builtins.readFile file}\nEOF\n";
  #   rustToolchain = fenix.packages.${pkgs.system}.complete.withComponents [
  #     "cargo"
  #     "clippy"
  #     "rust-src"
  #     "rustc"
  #     "rustfmt"
  #     "rust-analyzer"
  #   ];
  #   in
  # {
  #   enable = true;
  #
  #   viAlias = true;
  #   vimAlias = true;
  #   vimdiffAlias = true;
  #
  #   extraPackages = with pkgs; [
  #     nil
  #     luajitPackages.lua-lsp
  #     xclip
  #     wl-clipboard
  #     rustToolchain
  #     clang
  #   ];
  #
  #   plugins = with pkgs.vimPlugins; [
  #
  #     {
  #       plugin = nvim-lspconfig;
  #       config = toLuaFile ./nvim/plugin/lsp.lua;
  #     }
  #
  #     {
  #       plugin = comment-nvim;
  #       config = toLua "require(\"Comment\").setup()";
  #     }
  #
  #     {
  #       plugin = gruvbox-nvim;
  #       config = "colorscheme gruvbox";
  #     }
  #
  #     neodev-nvim
  #
  #     nvim-cmp 
  #     {
  #       plugin = nvim-cmp;
  #       config = toLuaFile ./nvim/plugin/cmp.lua;
  #     }
  #
  #     {
  #       plugin = telescope-nvim;
  #       config = toLuaFile ./nvim/plugin/telescope.lua;
  #     }
  #
  #     telescope-fzf-native-nvim
  #
  #     cmp_luasnip
  #     cmp-nvim-lsp
  #
  #     luasnip
  #     friendly-snippets
  #
  #
  #     nvim-web-devicons
  #     nvim-autopairs
  #
  #     {
  #       plugin = (nvim-treesitter.withPlugins (p: [
  #         p.tree-sitter-nix
  #         p.tree-sitter-vim
  #         p.tree-sitter-bash
  #         p.tree-sitter-lua
  #         p.tree-sitter-python
  #         p.tree-sitter-json
  #         p.tree-sitter-rust
  #       ]));
  #       config = toLuaFile ./nvim/plugin/treesitter.lua;
  #     }
  #     
  #     vim-nix
  #
  #     # {
  #     #   plugin = vimPlugins.own-onedark-nvim;
  #     #   config = "colorscheme onedark";
  #     # }
  #   ];
  #
  #   extraLuaConfig = ''
  #     ${builtins.readFile ./nvim/options.lua}
  #   '';
  #
  #   # extraLuaConfig = ''
  #   #   ${builtins.readFile ./nvim/options.lua}
  #   #   ${builtins.readFile ./nvim/plugin/lsp.lua}
  #   #   ${builtins.readFile ./nvim/plugin/cmp.lua}
  #   #   ${builtins.readFile ./nvim/plugin/telescope.lua}
  #   #   ${builtins.readFile ./nvim/plugin/treesitter.lua}
  #   #   ${builtins.readFile ./nvim/plugin/other.lua}
  #   # '';
  # };
}
